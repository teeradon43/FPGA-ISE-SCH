////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : alu.vf
// /___/   /\     Timestamp : 11/04/2020 23:38:08
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "D:/CE/2-1/01076006 Digital System Fundamentals/Lab/lab09/alu.vf" -w "D:/CE/2-1/01076006 Digital System Fundamentals/Lab/lab09/alu.sch"
//Design Name: alu
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module D4_16E_HXILINX_alu (D0, D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, A0, A1, A2, A3, E);
    

   output D0;
   output D1;
   output D2;
   output D3;
   output D4;
   output D5;
   output D6;
   output D7;
   output D8;
   output D9;
   output D10;
   output D11;
   output D12;
   output D13;
   output D14;
   output D15;

   input  A0;
   input  A1;
   input  A2;
   input  A3;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;
   reg D4;
   reg D5;
   reg D6;
   reg D7;
   reg D8;
   reg D9;
   reg D10;
   reg D11;
   reg D12;
   reg D13;
   reg D14;
   reg D15;

      always @ (A0 or A1 or A2 or A3 or E)
      begin
         if(!E)
           {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0000;
        else
        begin
           case({A3,A2,A1,A0})
             4'b0000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0001;
             4'b0001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0010;
             4'b0010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0100;
             4'b0011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_1000;
             4'b0100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0001_0000;
             4'b0101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0010_0000;
             4'b0110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0100_0000;
             4'b0111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_1000_0000;
             4'b1000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0001_0000_0000;
             4'b1001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0010_0000_0000;
             4'b1010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0100_0000_0000;
             4'b1011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_1000_0000_0000;
             4'b1100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0001_0000_0000_0000;
             4'b1101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0010_0000_0000_0000;
             4'b1110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0100_0000_0000_0000;
             4'b1111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b1000_0000_0000_0000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module FTC_HXILINX_alu(Q, C, CLR, T);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              T;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;
  
   
 
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else if(T)
          Q <= !Q;
     end
   
endmodule
`timescale  100 ps / 10 ps

module OR6_HXILINX_alu (O, I0, I1, I2, I3, I4, I5);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;

assign O = (I0 || I1 || I2 || I3 || I4 || I5);

endmodule
`timescale  100 ps / 10 ps

module ADSU8_HXILINX_alu (CO, OFL, S, A, ADD, B, CI);

   
   output             CO;
   output             OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  	      ADD;
   input  [7:0]       B;
   input              CI;

   reg    [8:0]       adsu_tmp;  

   always @ (A, ADD, B, CI) 
   begin
      if(ADD)
         adsu_tmp = A + B + CI;
      else
         adsu_tmp = A - (!CI) - B;
   end

   assign S   =  adsu_tmp[7:0];
   assign CO  =  ADD ? adsu_tmp[8] : ~adsu_tmp[8];
   assign OFL =  ADD ? ( (A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]) ) : ( (A[7] & (~B[7]) & (~S[7])) | ((~A[7]) & B[7] & S[7]) );

endmodule
`timescale  100 ps / 10 ps

module M2_1_HXILINX_alu (O, D0, D1, S0);
    

   output O;

   input  D0;
   input  D1;
   input  S0;

   reg O;

   always @ ( D0 or D1 or S0)
   begin
      case(S0)
      1'b0 : O <= D0;
      1'b1 : O <= D1;
      endcase
   end
    
endmodule
`timescale 1ns / 1ps

module arith_MUSER_alu(A, 
                       B, 
                       Mode, 
                       Q);

    input [7:0] A;
    input [7:0] B;
    input Mode;
   output [7:0] Q;
   
   wire XLXN_26;
   
   (* HU_SET = "XLXI_4_24" *) 
   ADSU8_HXILINX_alu  XLXI_4 (.A(A[7:0]), 
                             .ADD(Mode), 
                             .B(B[7:0]), 
                             .CI(XLXN_26), 
                             .CO(), 
                             .OFL(), 
                             .S(Q[7:0]));
   INV  XLXI_6 (.I(Mode), 
               .O(XLXN_26));
endmodule
`timescale 1ns / 1ps

module ClockDivider_MUSER_alu(CLK_20MHz, 
                              pinOuto);

    input CLK_20MHz;
   output pinOuto;
   
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_5;
   wire XLXN_7;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_19;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_22;
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_46;
   wire XLXN_47;
   wire XLXN_48;
   wire XLXN_49;
   wire XLXN_50;
   wire XLXN_51;
   wire XLXN_52;
   wire XLXN_54;
   wire XLXN_55;
   wire XLXN_56;
   wire XLXN_57;
   wire XLXN_58;
   wire XLXN_59;
   wire XLXN_60;
   wire XLXN_61;
   wire XLXN_64;
   wire XLXN_68;
   wire pinOuto_DUMMY;
   
   assign pinOuto = pinOuto_DUMMY;
   FD #( .INIT(1'b0) ) XLXI_6 (.C(CLK_20MHz), 
              .D(XLXN_3), 
              .Q(XLXN_2));
   INV  XLXI_8 (.I(XLXN_2), 
               .O(XLXN_3));
   FD #( .INIT(1'b0) ) XLXI_9 (.C(XLXN_3), 
              .D(XLXN_7), 
              .Q(XLXN_5));
   INV  XLXI_10 (.I(XLXN_5), 
                .O(XLXN_7));
   FD #( .INIT(1'b0) ) XLXI_15 (.C(XLXN_7), 
               .D(XLXN_15), 
               .Q(XLXN_14));
   INV  XLXI_16 (.I(XLXN_14), 
                .O(XLXN_15));
   FD #( .INIT(1'b0) ) XLXI_17 (.C(XLXN_15), 
               .D(XLXN_17), 
               .Q(XLXN_16));
   INV  XLXI_18 (.I(XLXN_16), 
                .O(XLXN_17));
   FD #( .INIT(1'b0) ) XLXI_19 (.C(XLXN_17), 
               .D(XLXN_20), 
               .Q(XLXN_19));
   INV  XLXI_20 (.I(XLXN_19), 
                .O(XLXN_20));
   FD #( .INIT(1'b0) ) XLXI_21 (.C(XLXN_20), 
               .D(XLXN_22), 
               .Q(XLXN_21));
   INV  XLXI_22 (.I(XLXN_21), 
                .O(XLXN_22));
   FD #( .INIT(1'b0) ) XLXI_23 (.C(XLXN_22), 
               .D(XLXN_24), 
               .Q(XLXN_23));
   INV  XLXI_24 (.I(XLXN_23), 
                .O(XLXN_24));
   FD #( .INIT(1'b0) ) XLXI_25 (.C(XLXN_24), 
               .D(XLXN_26), 
               .Q(XLXN_25));
   INV  XLXI_26 (.I(XLXN_25), 
                .O(XLXN_26));
   FD #( .INIT(1'b0) ) XLXI_43 (.C(XLXN_26), 
               .D(XLXN_47), 
               .Q(XLXN_46));
   INV  XLXI_44 (.I(XLXN_46), 
                .O(XLXN_47));
   FD #( .INIT(1'b0) ) XLXI_45 (.C(XLXN_47), 
               .D(XLXN_49), 
               .Q(XLXN_48));
   INV  XLXI_46 (.I(XLXN_48), 
                .O(XLXN_49));
   FD #( .INIT(1'b0) ) XLXI_47 (.C(XLXN_49), 
               .D(XLXN_51), 
               .Q(XLXN_50));
   INV  XLXI_48 (.I(XLXN_50), 
                .O(XLXN_51));
   FD #( .INIT(1'b0) ) XLXI_49 (.C(XLXN_51), 
               .D(XLXN_54), 
               .Q(XLXN_52));
   INV  XLXI_50 (.I(XLXN_52), 
                .O(XLXN_54));
   FD #( .INIT(1'b0) ) XLXI_51 (.C(XLXN_54), 
               .D(XLXN_56), 
               .Q(XLXN_55));
   INV  XLXI_52 (.I(XLXN_55), 
                .O(XLXN_56));
   FD #( .INIT(1'b0) ) XLXI_53 (.C(XLXN_56), 
               .D(XLXN_58), 
               .Q(XLXN_57));
   INV  XLXI_54 (.I(XLXN_57), 
                .O(XLXN_58));
   FD #( .INIT(1'b0) ) XLXI_55 (.C(XLXN_58), 
               .D(XLXN_60), 
               .Q(XLXN_59));
   INV  XLXI_56 (.I(XLXN_59), 
                .O(XLXN_60));
   FD #( .INIT(1'b0) ) XLXI_57 (.C(XLXN_60), 
               .D(XLXN_68), 
               .Q(XLXN_61));
   INV  XLXI_58 (.I(XLXN_61), 
                .O(XLXN_68));
   FD #( .INIT(1'b0) ) XLXI_59 (.C(XLXN_68), 
               .D(pinOuto_DUMMY), 
               .Q(XLXN_64));
   INV  XLXI_60 (.I(XLXN_64), 
                .O(pinOuto_DUMMY));
endmodule
`timescale 1ns / 1ps

module MUX4_MUSER_alu(DATA, 
                      SEL, 
                      A, 
                      B, 
                      C, 
                      D);

    input [7:0] DATA;
    input SEL;
   output A;
   output B;
   output C;
   output D;
   
   
   (* HU_SET = "XLXI_1_25" *) 
   M2_1_HXILINX_alu  XLXI_1 (.D0(DATA[0]), 
                            .D1(DATA[4]), 
                            .S0(SEL), 
                            .O(A));
   (* HU_SET = "XLXI_2_26" *) 
   M2_1_HXILINX_alu  XLXI_2 (.D0(DATA[1]), 
                            .D1(DATA[5]), 
                            .S0(SEL), 
                            .O(B));
   (* HU_SET = "XLXI_3_27" *) 
   M2_1_HXILINX_alu  XLXI_3 (.D0(DATA[2]), 
                            .D1(DATA[6]), 
                            .S0(SEL), 
                            .O(C));
   (* HU_SET = "XLXI_4_28" *) 
   M2_1_HXILINX_alu  XLXI_4 (.D0(DATA[3]), 
                            .D1(DATA[7]), 
                            .S0(SEL), 
                            .O(D));
endmodule
`timescale 1ns / 1ps

module BCD_0_F_Decoder_MUSER_alu(Bit_0, 
                                 Bit_1, 
                                 Bit_2, 
                                 Bit_3, 
                                 A_7, 
                                 B_7, 
                                 C_7, 
                                 D_7, 
                                 E_7, 
                                 F_7, 
                                 G_7);

    input Bit_0;
    input Bit_1;
    input Bit_2;
    input Bit_3;
   output A_7;
   output B_7;
   output C_7;
   output D_7;
   output E_7;
   output F_7;
   output G_7;
   
   wire A;
   wire B;
   wire C;
   wire D0;
   wire D1;
   wire D2;
   wire D3;
   wire D4;
   wire D5;
   wire D6;
   wire D7;
   wire D8;
   wire D9;
   wire D10;
   wire D11;
   wire D12;
   wire D13;
   wire D14;
   wire D15;
   wire E;
   wire F;
   wire G;
   wire XLXN_37;
   wire XLXN_38;
   
   (* HU_SET = "XLXI_1_29" *) 
   D4_16E_HXILINX_alu  XLXI_1 (.A0(Bit_0), 
                              .A1(Bit_1), 
                              .A2(Bit_2), 
                              .A3(Bit_3), 
                              .E(XLXN_37), 
                              .D0(D0), 
                              .D1(D1), 
                              .D2(D2), 
                              .D3(D3), 
                              .D4(D4), 
                              .D5(D5), 
                              .D6(D6), 
                              .D7(D7), 
                              .D8(D8), 
                              .D9(D9), 
                              .D10(D10), 
                              .D11(D11), 
                              .D12(D12), 
                              .D13(D13), 
                              .D14(D14), 
                              .D15(D15));
   OR4  XLXI_25 (.I0(D12), 
                .I1(D7), 
                .I2(D1), 
                .I3(D0), 
                .O(G));
   OR5  XLXI_26 (.I0(D13), 
                .I1(D7), 
                .I2(D3), 
                .I3(D2), 
                .I4(D1), 
                .O(F));
   (* HU_SET = "XLXI_27_30" *) 
   OR6_HXILINX_alu  XLXI_27 (.I0(D9), 
                            .I1(D7), 
                            .I2(D5), 
                            .I3(D4), 
                            .I4(D3), 
                            .I5(D1), 
                            .O(E));
   OR4  XLXI_31 (.I0(D11), 
                .I1(D13), 
                .I2(D4), 
                .I3(D1), 
                .O(A));
   VCC  XLXI_32 (.P(XLXN_37));
   INV  XLXI_33 (.I(G), 
                .O(G_7));
   INV  XLXI_34 (.I(F), 
                .O(F_7));
   INV  XLXI_35 (.I(E), 
                .O(E_7));
   INV  XLXI_36 (.I(XLXN_38), 
                .O(D_7));
   INV  XLXI_37 (.I(C), 
                .O(C_7));
   INV  XLXI_38 (.I(B), 
                .O(B_7));
   INV  XLXI_39 (.I(A), 
                .O(A_7));
   OR5  XLXI_40 (.I0(D15), 
                .I1(D10), 
                .I2(D7), 
                .I3(D4), 
                .I4(D1), 
                .O(XLXN_38));
   OR4  XLXI_41 (.I0(D15), 
                .I1(D14), 
                .I2(D12), 
                .I3(D2), 
                .O(C));
   (* HU_SET = "XLXI_43_31" *) 
   OR6_HXILINX_alu  XLXI_43 (.I0(D15), 
                            .I1(D14), 
                            .I2(D12), 
                            .I3(D11), 
                            .I4(D6), 
                            .I5(D5), 
                            .O(B));
endmodule
`timescale 1ns / 1ps

module Mux16_MUSER_alu(IN_1, 
                       IN_2, 
                       IN_3, 
                       IN_4, 
                       OUT0, 
                       OUT1, 
                       OUT2, 
                       OUT3, 
                       bitOUT);

    input [7:0] IN_1;
    input [7:0] IN_2;
    input [7:0] IN_3;
    input [7:0] IN_4;
    input OUT0;
    input OUT1;
    input OUT2;
    input OUT3;
   output [7:0] bitOUT;
   
   wire [7:0] XLXN_141;
   wire [7:0] XLXN_142;
   wire [7:0] XLXN_143;
   wire [7:0] XLXN_144;
   
   AND2  XLXI_31_0 (.I0(OUT1), 
                   .I1(IN_2[0]), 
                   .O(XLXN_142[0]));
   AND2  XLXI_31_1 (.I0(OUT1), 
                   .I1(IN_2[1]), 
                   .O(XLXN_142[1]));
   AND2  XLXI_31_2 (.I0(OUT1), 
                   .I1(IN_2[2]), 
                   .O(XLXN_142[2]));
   AND2  XLXI_31_3 (.I0(OUT1), 
                   .I1(IN_2[3]), 
                   .O(XLXN_142[3]));
   AND2  XLXI_31_4 (.I0(OUT1), 
                   .I1(IN_2[4]), 
                   .O(XLXN_142[4]));
   AND2  XLXI_31_5 (.I0(OUT1), 
                   .I1(IN_2[5]), 
                   .O(XLXN_142[5]));
   AND2  XLXI_31_6 (.I0(OUT1), 
                   .I1(IN_2[6]), 
                   .O(XLXN_142[6]));
   AND2  XLXI_31_7 (.I0(OUT1), 
                   .I1(IN_2[7]), 
                   .O(XLXN_142[7]));
   AND2  XLXI_32_0 (.I0(OUT2), 
                   .I1(IN_3[0]), 
                   .O(XLXN_143[0]));
   AND2  XLXI_32_1 (.I0(OUT2), 
                   .I1(IN_3[1]), 
                   .O(XLXN_143[1]));
   AND2  XLXI_32_2 (.I0(OUT2), 
                   .I1(IN_3[2]), 
                   .O(XLXN_143[2]));
   AND2  XLXI_32_3 (.I0(OUT2), 
                   .I1(IN_3[3]), 
                   .O(XLXN_143[3]));
   AND2  XLXI_32_4 (.I0(OUT2), 
                   .I1(IN_3[4]), 
                   .O(XLXN_143[4]));
   AND2  XLXI_32_5 (.I0(OUT2), 
                   .I1(IN_3[5]), 
                   .O(XLXN_143[5]));
   AND2  XLXI_32_6 (.I0(OUT2), 
                   .I1(IN_3[6]), 
                   .O(XLXN_143[6]));
   AND2  XLXI_32_7 (.I0(OUT2), 
                   .I1(IN_3[7]), 
                   .O(XLXN_143[7]));
   AND2  XLXI_33_0 (.I0(OUT3), 
                   .I1(IN_4[0]), 
                   .O(XLXN_144[0]));
   AND2  XLXI_33_1 (.I0(OUT3), 
                   .I1(IN_4[1]), 
                   .O(XLXN_144[1]));
   AND2  XLXI_33_2 (.I0(OUT3), 
                   .I1(IN_4[2]), 
                   .O(XLXN_144[2]));
   AND2  XLXI_33_3 (.I0(OUT3), 
                   .I1(IN_4[3]), 
                   .O(XLXN_144[3]));
   AND2  XLXI_33_4 (.I0(OUT3), 
                   .I1(IN_4[4]), 
                   .O(XLXN_144[4]));
   AND2  XLXI_33_5 (.I0(OUT3), 
                   .I1(IN_4[5]), 
                   .O(XLXN_144[5]));
   AND2  XLXI_33_6 (.I0(OUT3), 
                   .I1(IN_4[6]), 
                   .O(XLXN_144[6]));
   AND2  XLXI_33_7 (.I0(OUT3), 
                   .I1(IN_4[7]), 
                   .O(XLXN_144[7]));
   AND2  XLXI_34_0 (.I0(OUT0), 
                   .I1(IN_1[0]), 
                   .O(XLXN_141[0]));
   AND2  XLXI_34_1 (.I0(OUT0), 
                   .I1(IN_1[1]), 
                   .O(XLXN_141[1]));
   AND2  XLXI_34_2 (.I0(OUT0), 
                   .I1(IN_1[2]), 
                   .O(XLXN_141[2]));
   AND2  XLXI_34_3 (.I0(OUT0), 
                   .I1(IN_1[3]), 
                   .O(XLXN_141[3]));
   AND2  XLXI_34_4 (.I0(OUT0), 
                   .I1(IN_1[4]), 
                   .O(XLXN_141[4]));
   AND2  XLXI_34_5 (.I0(OUT0), 
                   .I1(IN_1[5]), 
                   .O(XLXN_141[5]));
   AND2  XLXI_34_6 (.I0(OUT0), 
                   .I1(IN_1[6]), 
                   .O(XLXN_141[6]));
   AND2  XLXI_34_7 (.I0(OUT0), 
                   .I1(IN_1[7]), 
                   .O(XLXN_141[7]));
   OR4  XLXI_35_0 (.I0(XLXN_144[0]), 
                  .I1(XLXN_143[0]), 
                  .I2(XLXN_142[0]), 
                  .I3(XLXN_141[0]), 
                  .O(bitOUT[0]));
   OR4  XLXI_35_1 (.I0(XLXN_144[1]), 
                  .I1(XLXN_143[1]), 
                  .I2(XLXN_142[1]), 
                  .I3(XLXN_141[1]), 
                  .O(bitOUT[1]));
   OR4  XLXI_35_2 (.I0(XLXN_144[2]), 
                  .I1(XLXN_143[2]), 
                  .I2(XLXN_142[2]), 
                  .I3(XLXN_141[2]), 
                  .O(bitOUT[2]));
   OR4  XLXI_35_3 (.I0(XLXN_144[3]), 
                  .I1(XLXN_143[3]), 
                  .I2(XLXN_142[3]), 
                  .I3(XLXN_141[3]), 
                  .O(bitOUT[3]));
   OR4  XLXI_35_4 (.I0(XLXN_144[4]), 
                  .I1(XLXN_143[4]), 
                  .I2(XLXN_142[4]), 
                  .I3(XLXN_141[4]), 
                  .O(bitOUT[4]));
   OR4  XLXI_35_5 (.I0(XLXN_144[5]), 
                  .I1(XLXN_143[5]), 
                  .I2(XLXN_142[5]), 
                  .I3(XLXN_141[5]), 
                  .O(bitOUT[5]));
   OR4  XLXI_35_6 (.I0(XLXN_144[6]), 
                  .I1(XLXN_143[6]), 
                  .I2(XLXN_142[6]), 
                  .I3(XLXN_141[6]), 
                  .O(bitOUT[6]));
   OR4  XLXI_35_7 (.I0(XLXN_144[7]), 
                  .I1(XLXN_143[7]), 
                  .I2(XLXN_142[7]), 
                  .I3(XLXN_141[7]), 
                  .O(bitOUT[7]));
endmodule
`timescale 1ns / 1ps

module shift_state_MUSER_alu(A, 
                             O);

    input [7:0] A;
   output [7:0] O;
   
   wire XLXN_26;
   wire XLXN_28;
   
   AND2  XLXI_9 (.I0(XLXN_28), 
                .I1(A[0]), 
                .O(O[1]));
   AND2  XLXI_10 (.I0(XLXN_28), 
                 .I1(A[1]), 
                 .O(O[2]));
   AND2  XLXI_11 (.I0(XLXN_28), 
                 .I1(A[2]), 
                 .O(O[3]));
   AND2  XLXI_12 (.I0(XLXN_28), 
                 .I1(A[3]), 
                 .O(O[4]));
   AND2  XLXI_13 (.I0(XLXN_28), 
                 .I1(A[4]), 
                 .O(O[5]));
   AND2  XLXI_14 (.I0(XLXN_28), 
                 .I1(A[5]), 
                 .O(O[6]));
   AND2  XLXI_15 (.I0(XLXN_28), 
                 .I1(A[6]), 
                 .O(O[7]));
   AND2  XLXI_16 (.I0(XLXN_26), 
                 .I1(XLXN_28), 
                 .O(O[0]));
   GND  XLXI_17 (.G(XLXN_26));
   VCC  XLXI_18 (.P(XLXN_28));
endmodule
`timescale 1ns / 1ps

module xor_state_MUSER_alu(A, 
                           B, 
                           C);

    input [7:0] A;
    input [7:0] B;
   output [7:0] C;
   
   
   XOR2  XLXI_2_0 (.I0(B[0]), 
                  .I1(A[0]), 
                  .O(C[0]));
   XOR2  XLXI_2_1 (.I0(B[1]), 
                  .I1(A[1]), 
                  .O(C[1]));
   XOR2  XLXI_2_2 (.I0(B[2]), 
                  .I1(A[2]), 
                  .O(C[2]));
   XOR2  XLXI_2_3 (.I0(B[3]), 
                  .I1(A[3]), 
                  .O(C[3]));
   XOR2  XLXI_2_4 (.I0(B[4]), 
                  .I1(A[4]), 
                  .O(C[4]));
   XOR2  XLXI_2_5 (.I0(B[5]), 
                  .I1(A[5]), 
                  .O(C[5]));
   XOR2  XLXI_2_6 (.I0(B[6]), 
                  .I1(A[6]), 
                  .O(C[6]));
   XOR2  XLXI_2_7 (.I0(B[7]), 
                  .I1(A[7]), 
                  .O(C[7]));
endmodule
`timescale 1ns / 1ps

module twoBitCounter_MUSER_alu(CLK_IN, 
                               OUT0, 
                               OUT1);

    input CLK_IN;
   output OUT0;
   output OUT1;
   
   wire XLXN_4;
   wire XLXN_8;
   wire XLXN_11;
   wire XLXN_14;
   wire OUT0_DUMMY;
   
   assign OUT0 = OUT0_DUMMY;
   (* HU_SET = "XLXI_1_32" *) 
   FTC_HXILINX_alu  XLXI_1 (.C(XLXN_14), 
                           .CLR(XLXN_8), 
                           .T(XLXN_11), 
                           .Q(OUT0_DUMMY));
   (* HU_SET = "XLXI_2_33" *) 
   FTC_HXILINX_alu  XLXI_2 (.C(XLXN_4), 
                           .CLR(XLXN_8), 
                           .T(XLXN_11), 
                           .Q(OUT1));
   VCC  XLXI_3 (.P(XLXN_11));
   INV  XLXI_4 (.I(OUT0_DUMMY), 
               .O(XLXN_4));
   GND  XLXI_10 (.G(XLXN_8));
   INV  XLXI_11 (.I(CLK_IN), 
                .O(XLXN_14));
endmodule
`timescale 1ns / 1ps

module demux1to4_MUSER_alu(C_IN, 
                           OUT0, 
                           OUT1, 
                           OUT2, 
                           OUT3);

    input C_IN;
   output OUT0;
   output OUT1;
   output OUT2;
   output OUT3;
   
   wire XLXN_2;
   wire XLXN_18;
   wire XLXN_19;
   wire XLXN_25;
   
   twoBitCounter_MUSER_alu  XLXI_1 (.CLK_IN(C_IN), 
                                   .OUT0(XLXN_2), 
                                   .OUT1(XLXN_25));
   INV  XLXI_2 (.I(XLXN_2), 
               .O(XLXN_18));
   INV  XLXI_3 (.I(XLXN_25), 
               .O(XLXN_19));
   AND2  XLXI_12 (.I0(XLXN_19), 
                 .I1(XLXN_18), 
                 .O(OUT0));
   AND2  XLXI_13 (.I0(XLXN_19), 
                 .I1(XLXN_2), 
                 .O(OUT1));
   AND2  XLXI_14 (.I0(XLXN_25), 
                 .I1(XLXN_18), 
                 .O(OUT2));
   AND2  XLXI_15 (.I0(XLXN_25), 
                 .I1(XLXN_2), 
                 .O(OUT3));
endmodule
`timescale 1ns / 1ps

module alu(CLK, 
           DAT_A, 
           DAT_B, 
           toggleMode, 
           A, 
           B, 
           C, 
           Common0, 
           Common1, 
           D, 
           E, 
           F, 
           G, 
           LED0, 
           LED1, 
           LED2, 
           LED3);

    input CLK;
    input [7:0] DAT_A;
    input [7:0] DAT_B;
   (* CLOCK_DEDICATED_ROUTE = "FALSE" *) 
    input toggleMode;
   output A;
   output B;
   output C;
   output Common0;
   output Common1;
   output D;
   output E;
   output F;
   output G;
   output LED0;
   output LED1;
   output LED2;
   output LED3;
   
   wire [7:0] XLXN_12;
   wire [7:0] XLXN_27;
   wire [7:0] XLXN_29;
   wire [7:0] XLXN_48;
   wire XLXN_50;
   wire XLXN_51;
   wire XLXN_53;
   wire XLXN_54;
   wire Common0_DUMMY;
   wire LED0_DUMMY;
   wire LED1_DUMMY;
   wire LED2_DUMMY;
   wire LED3_DUMMY;
   
   assign Common0 = Common0_DUMMY;
   assign LED0 = LED0_DUMMY;
   assign LED1 = LED1_DUMMY;
   assign LED2 = LED2_DUMMY;
   assign LED3 = LED3_DUMMY;
   demux1to4_MUSER_alu  XLXI_4 (.C_IN(toggleMode), 
                               .OUT0(LED0_DUMMY), 
                               .OUT1(LED1_DUMMY), 
                               .OUT2(LED2_DUMMY), 
                               .OUT3(LED3_DUMMY));
   xor_state_MUSER_alu  XLXI_6 (.A(DAT_A[7:0]), 
                               .B(DAT_B[7:0]), 
                               .C(XLXN_27[7:0]));
   shift_state_MUSER_alu  XLXI_7 (.A(DAT_A[7:0]), 
                                 .O(XLXN_29[7:0]));
   Mux16_MUSER_alu  XLXI_8 (.IN_1(XLXN_12[7:0]), 
                           .IN_2(XLXN_12[7:0]), 
                           .IN_3(XLXN_27[7:0]), 
                           .IN_4(XLXN_29[7:0]), 
                           .OUT0(LED0_DUMMY), 
                           .OUT1(LED1_DUMMY), 
                           .OUT2(LED2_DUMMY), 
                           .OUT3(LED3_DUMMY), 
                           .bitOUT(XLXN_48[7:0]));
   BCD_0_F_Decoder_MUSER_alu  XLXI_9 (.Bit_0(XLXN_50), 
                                     .Bit_1(XLXN_51), 
                                     .Bit_2(XLXN_54), 
                                     .Bit_3(XLXN_53), 
                                     .A_7(A), 
                                     .B_7(B), 
                                     .C_7(C), 
                                     .D_7(D), 
                                     .E_7(E), 
                                     .F_7(F), 
                                     .G_7(G));
   MUX4_MUSER_alu  XLXI_10 (.DATA(XLXN_48[7:0]), 
                           .SEL(Common0_DUMMY), 
                           .A(XLXN_50), 
                           .B(XLXN_51), 
                           .C(XLXN_54), 
                           .D(XLXN_53));
   ClockDivider_MUSER_alu  XLXI_11 (.CLK_20MHz(CLK), 
                                   .pinOuto(Common0_DUMMY));
   INV  XLXI_12 (.I(Common0_DUMMY), 
                .O(Common1));
   arith_MUSER_alu  XLXI_17 (.A(DAT_A[7:0]), 
                            .B(DAT_B[7:0]), 
                            .Mode(LED0_DUMMY), 
                            .Q(XLXN_12[7:0]));
endmodule
